{{ if ne .chezmoi.os "windows" -}}
#!/bin/bash

# Function to check if fish is working
test_fish() {
    if command -v fish > /dev/null 2>&1; then
        # Test that fish can actually run
        if fish -c "echo 'Fish test successful'" > /dev/null 2>&1; then
            return 0
        fi
    fi
    return 1
}

# Function to get current shell
get_current_shell() {
    if [ -n "$SHELL" ]; then
        basename "$SHELL"
    else
        echo "unknown"
    fi
}

# Function to safely change shell
change_shell() {
    local fish_path="$1"
    local current_shell
    current_shell=$(get_current_shell)

    echo "Current shell: $current_shell"
    echo "Attempting to change shell to: $fish_path"

        # Check if fish is in /etc/shells
    if ! grep -q "^$fish_path$" /etc/shells 2>/dev/null; then
        echo "Adding $fish_path to /etc/shells..."
        if command -v sudo > /dev/null 2>&1; then
            if ! echo "$fish_path" | sudo -n tee -a /etc/shells > /dev/null 2>&1; then
                echo "Need sudo access to add fish to /etc/shells. Please enter your password:"
                echo "$fish_path" | sudo tee -a /etc/shells > /dev/null
            fi
        else
            echo "Warning: Cannot add fish to /etc/shells (no sudo). Shell change may fail."
        fi
    fi

    # Attempt to change shell
    if command -v chsh > /dev/null 2>&1; then
        echo "Need password to change shell:"
        if chsh -s "$fish_path"; then
            echo "‚úÖ Successfully changed default shell to fish!"
            echo "   New sessions will use fish. Current session still uses $current_shell."
            return 0
        else
            echo "‚ùå chsh failed. Trying alternative methods..."
        fi
    fi

    # Alternative method: try usermod for some Linux systems
    if command -v usermod > /dev/null 2>&1 && command -v sudo > /dev/null 2>&1; then
        if sudo -n usermod -s "$fish_path" "$USER" 2>/dev/null || sudo usermod -s "$fish_path" "$USER" 2>/dev/null; then
            echo "‚úÖ Successfully changed shell via usermod!"
            return 0
        fi
    fi

    return 1
}

# Function to ensure starship is available
ensure_starship() {
    if ! command -v starship > /dev/null 2>&1; then
        echo "Starship not found. Installing via official installer..."
        if command -v curl > /dev/null 2>&1; then
            # Create user bin directory if it doesn't exist
            mkdir -p "$HOME/.local/bin"
            # Use the official installer with auto-approval and user bin directory
            curl -sS https://starship.rs/install.sh | sh -s -- --bin-dir "$HOME/.local/bin" --yes
            # Add to PATH if not already there
            if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
                export PATH="$HOME/.local/bin:$PATH"
            fi
        else
            echo "‚ùå Cannot install starship (curl not available)"
            return 1
        fi
    fi
    return 0
}

# Ensure starship is available first (before any sudo operations)
if ! ensure_starship; then
    echo "‚ö†Ô∏è  Starship installation failed."
    echo "   Please install starship manually before proceeding."
    exit 1
fi

if test_fish; then
    # Find fish path
    FISH_PATH=$(command -v fish)

    # Check if we're already using fish
    if [ "$(get_current_shell)" = "fish" ]; then
        exit 0
    fi

    # Ensure fish cache directory exists
    mkdir -p "$HOME/.cache/fish"

    # Attempt to change shell
    if change_shell "$FISH_PATH"; then
        echo ""
        echo "üêü Fish setup complete! Restart your terminal or run 'exec fish' to start using fish."
    else
        echo ""
        echo "‚ö†Ô∏è  Could not automatically change default shell."
        echo "   You can manually change it by running: chsh -s $FISH_PATH"
    fi
else
    echo "‚ùå Fish is not available or not working properly."
    echo "   Please ensure fish is installed and functional. Your shell is unchanged."
    exit 1
fi
{{ end -}}
