#!/bin/bash
# shellcheck disable=SC1091,SC2016

# Basic config setup
PUID=$(id -u) && export PUID
PGID=$(id -g) && export PGID
export TZ="America/New_York"
export HOMEBREW_NO_ENV_HINTS="true"
# export TIME_STYLE="default"
export LSCOLORS="Gxfxcxdxbxegedabagacad"
export LS_COLORS="di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"

# Homebrew local storage space workaround
[[ "$(uname)" == "Linux" ]] && export HOMEBREW_TEMP=/var/tmp

# Reset PATH to system defaults
PATH=$(getconf PATH)

# Paths to add (lower paths come first)
PATH_LIST="
/opt/local/bin
/sbin
/System/Cryptexes/App/usr/bin
/Library/Apple/usr/bin
/usr/libexec
/usr/local/bin
$HOME/.local/bin/node
$HOME/.local/bin
$HOME/.bin
$HOME/bin
$HOME/.pyenv/bin
$HOME/.pyenv/shims
$HOME/.rbenv/bin
$HOME/.cargo/bin
/var/lib/snapd/snap/bin
/usr/local/opt/findutils/libexec/gnubin
/opt/homebrew/opt/findutils/libexec/gnubin
/opt/homebrew/opt/openjdk/bin
"

# Use subshell to set PATH
PATH=$(echo "$PATH_LIST" | while read -r dir; do
    if [ -n "$dir" ] && [ -d "$dir" ]; then
        echo -n "$dir:"
    fi
done)$PATH

# Ensure critical system paths are included
for dir in /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin; do
    if [[ ":$PATH:" != *":$dir:"* ]]; then
        PATH="$PATH:$dir"
    fi
done

# Add LM Studio to path if installed
[ -d "$HOME/.lmstudio/bin" ] && PATH="$PATH:$HOME/.lmstudio/bin"

# Run path_helper if it exists
[ -f /usr/libexec/path_helper ] && eval "$(/usr/libexec/path_helper -s)"

# Homebrew
if [[ -f /opt/homebrew/bin/brew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -f /usr/local/bin/brew ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
elif [[ -f /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# Configure Python and Ruby to use Homebrew
# Prerequisites: brew install openssl@3 readline sqlite3 zlib gettext tcl-tk libb2
if [ "$(command -v brew)" ]; then
    # Cache brew --prefix results
    BREW_PREFIX=$(brew --prefix)
    BREW_READLINE="$BREW_PREFIX/opt/readline"
    BREW_OPENSSL="$BREW_PREFIX/opt/openssl@3"
    BREW_SQLITE="$BREW_PREFIX/opt/sqlite"
    BREW_ZLIB="$BREW_PREFIX/opt/zlib"
    BREW_GETTEXT="$BREW_PREFIX/opt/gettext"
    BREW_TCLTK="$BREW_PREFIX/opt/tcl-tk"

    # Common flags for both standard and optimized builds
    LDFLAGS="-L$BREW_READLINE/lib \
             -L$BREW_OPENSSL/lib \
             -L$BREW_SQLITE/lib \
             -L$BREW_ZLIB/lib \
             -L$BREW_GETTEXT/lib"
    export LDFLAGS

    CPPFLAGS="-I$BREW_READLINE/include \
              -I$BREW_OPENSSL/include \
              -I$BREW_SQLITE/include \
              -I$BREW_ZLIB/include \
              -I$BREW_GETTEXT/include"
    export CPPFLAGS

    PKG_CONFIG_PATH="$BREW_READLINE/lib/pkgconfig:\
                     $BREW_OPENSSL/lib/pkgconfig:\
                     $BREW_SQLITE/lib/pkgconfig:\
                     $BREW_ZLIB/lib/pkgconfig:\
                     $BREW_GETTEXT/lib/pkgconfig"
    export PKG_CONFIG_PATH

    OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)
    export OPENSSL_ROOT_DIR
    export LDFLAGS="-L$OPENSSL_ROOT_DIR/lib $LDFLAGS"
    export CPPFLAGS="-I$OPENSSL_ROOT_DIR/include $CPPFLAGS"
    export PKG_CONFIG_PATH="$OPENSSL_ROOT_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"

    # Common Python configuration options
    typeset -a PYTHON_CONFIGURE_OPTS
    PYTHON_CONFIGURE_OPTS=(
        "--enable-framework"
        "--with-openssl=$OPENSSL_ROOT_DIR"
        "--with-tcltk-includes=-I$BREW_TCLTK/include"
        "--with-tcltk-libs=-L$BREW_TCLTK/lib -ltcl8.6 -ltk8.6"
    )

    # Function to switch between standard and optimized Python builds
    python_build_mode() {
        local mode_file="$HOME/.python_build_mode"
        if [ ! -f "$mode_file" ] || [ "$1" != "$(cat "$mode_file")" ]; then
            if [ "$1" = "optimized" ]; then
                BREW_LIBB2="$BREW_PREFIX/opt/libb2"
                LDFLAGS="$LDFLAGS -L$BREW_LIBB2/lib"
                CPPFLAGS="$CPPFLAGS -I$BREW_LIBB2/include"
                PYTHON_CONFIGURE_OPTS+=("--with-readline=edit")
                PYTHON_CFLAGS="-march=native -mtune=native"
                if [ -f "$mode_file" ]; then
                    echo "Switched to optimized Python build mode"
                fi
            else
                PYTHON_CONFIGURE_OPTS+=("--with-readline=homebrew")
                unset PYTHON_CFLAGS
                if [ -f "$mode_file" ]; then
                    echo "Switched to standard Python build mode"
                fi
            fi
            # Save the mode to the file
            echo "$1" > "$mode_file"
            # Export the variables
            export LDFLAGS CPPFLAGS PYTHON_CFLAGS
            # Export PYTHON_CONFIGURE_OPTS as an array
            export PYTHON_CONFIGURE_OPTS
        fi
    }

    # Default to standard build mode if not set
    if [ ! -f "$HOME/.python_build_mode" ]; then
        python_build_mode standard
    fi

    # Ruby configuration
    RUBY_CONFIGURE_OPTS="--with-openssl-dir=$BREW_OPENSSL"
    export RUBY_CONFIGURE_OPTS
fi

# Import 1Password if it exists
[ -f "$HOME/.config/op/plugins.sh" ] && source "$HOME/.config/op/plugins.sh"

# Set Visual Studio Code as default editor if installed
command -v code >/dev/null 2>&1 && export EDITOR=code

# Initialize pyenv
if [ "$(command -v pyenv)" ]; then
    eval "$(pyenv init -)"
    export PYENV_PIP_PACKAGES="argparse halo inquirer python-dotenv requests termcolor"
    [ "$(command -v pyenv-virtualenv-init)" ] && eval "$(pyenv virtualenv-init -)"
fi

# Add our Python user bin to PYTHONPATH if it exists
if [ -z "$PYTHONPATH" ]; then
    export PYTHONPATH="$HOME/.local/bin"
else
    export PYTHONPATH="$PYTHONPATH:$HOME/.local/bin"
fi

# Initialize FNM (Fast Node Manager)
if [ "$(command -v fnm)" ]; then eval "$(fnm env --use-on-cd)"; fi

# Lazy loading for rarely used tools
_lazy_load() {
    local tool=$1
    local init_file="$HOME/.${tool}_init"
    if [ ! -f "$init_file" ]; then
        case $tool in
            rbenv)
                echo 'eval "$(rbenv init -)"' > "$init_file"
                ;;
            cargo)
                echo 'source "$HOME/.cargo/env"' > "$init_file"
                ;;
        esac
    fi
    eval "${tool}() { unset -f ${tool}; source ${init_file}; ${tool} \$@; }"
}

# Set up lazy loading for rarely used tools
[ "$(command -v rbenv)" ] && _lazy_load rbenv
[ -d "$HOME/.cargo/env" ] && _lazy_load cargo
[ -d "$HOME/.config/nvm" ] && _lazy_load nvm

# Steam Tinker Launch for Steam Deck
[ -d "/home/deck/stl/prefix" ] && export PATH="$PATH:/home/deck/stl/prefix"

# Export final PATH
export PATH
